// <auto-generated />
using System;
using Akalaat.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Akalaat.DAL.Data.Migrations
{
    [DbContext(typeof(AkalaatDbContext))]
    partial class AkalaatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Akalaat.DAL.Models.Address_Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Region_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Customer_ID")
                        .IsUnique();

                    b.HasIndex("Region_ID");

                    b.ToTable("AddressBooks");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Available_Delivery_Area", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("AvailableDeliveryAreas");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Close_Hour")
                        .HasColumnType("int");

                    b.Property<int>("Estimated_Delivery_Time")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDineIn")
                        .HasColumnType("bit");

                    b.Property<int>("Open_Hour")
                        .HasColumnType("int");

                    b.Property<int>("Region_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Resturant_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Region_ID");

                    b.HasIndex("ReservationId");

                    b.HasIndex("Resturant_ID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Menu_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Menu_ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dish_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("City_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("City_ID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Item_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Item_ID");

                    b.ToTable("Extra");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsOffer")
                        .HasColumnType("int");

                    b.Property<int?>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("MenuID");

                    b.HasIndex("OfferId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Item_Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemSizes");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Resturant_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Menu_Item_Size", b =>
                {
                    b.Property<int>("Item_ID")
                        .HasColumnType("int");

                    b.Property<int>("Item_Size_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size_Image_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Item_ID", "Item_Size_ID");

                    b.HasIndex("Item_Size_ID");

                    b.ToTable("MenuItemSizes");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Menu_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Offer_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Menu_ID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Arrival_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total_Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Customer_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("District_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("District_ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Customer_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Customer_ID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Resturant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cover_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Menu_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Vendor_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Menu_ID")
                        .IsUnique()
                        .HasFilter("[Menu_ID] IS NOT NULL");

                    b.HasIndex("Vendor_ID");

                    b.ToTable("Resturants");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("No_of_Likes")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("Resturant_ID")
                        .HasColumnType("int");

                    b.Property<string>("ReviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Customer_ID");

                    b.HasIndex("Resturant_ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.ShoppingCartItem", b =>
                {
                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("DishResturant", b =>
                {
                    b.Property<int>("DishesId")
                        .HasColumnType("int");

                    b.Property<int>("resturantDishesId")
                        .HasColumnType("int");

                    b.HasKey("DishesId", "resturantDishesId");

                    b.HasIndex("resturantDishesId");

                    b.ToTable("DishResturant");
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("ItemsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoodResturant", b =>
                {
                    b.Property<int>("MoodsId")
                        .HasColumnType("int");

                    b.Property<int>("resturant_MoodsId")
                        .HasColumnType("int");

                    b.HasKey("MoodsId", "resturant_MoodsId");

                    b.HasIndex("resturant_MoodsId");

                    b.ToTable("MoodResturant");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Admin", b =>
                {
                    b.HasBaseType("Akalaat.DAL.Models.ApplicationUser");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Customer", b =>
                {
                    b.HasBaseType("Akalaat.DAL.Models.ApplicationUser");

                    b.Property<int?>("ShoppingCart_ID")
                        .HasColumnType("int");

                    b.HasIndex("ShoppingCart_ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Vendor", b =>
                {
                    b.HasBaseType("Akalaat.DAL.Models.ApplicationUser");

                    b.Property<int?>("Resturant_ID")
                        .HasColumnType("int");

                    b.HasIndex("Resturant_ID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Address_Book", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Customer", "Customer")
                        .WithOne("Address_Book")
                        .HasForeignKey("Akalaat.DAL.Models.Address_Book", "Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Region", "Region")
                        .WithMany("AddressBooks")
                        .HasForeignKey("Region_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Available_Delivery_Area", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Branch", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Region", "Region")
                        .WithMany("Branches")
                        .HasForeignKey("Region_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Reservation", null)
                        .WithMany("BranchReservations")
                        .HasForeignKey("ReservationId");

                    b.HasOne("Akalaat.DAL.Models.Resturant", "Resturant")
                        .WithMany("Branches")
                        .HasForeignKey("Resturant_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Resturant");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Category", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Menu", "Menu")
                        .WithMany("categories")
                        .HasForeignKey("Menu_ID");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.District", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("City_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Extra", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Item", "Item")
                        .WithMany("extras")
                        .HasForeignKey("Item_ID");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Item", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("Akalaat.DAL.Models.Menu", "menu")
                        .WithMany("items")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Offer", null)
                        .WithMany("Items")
                        .HasForeignKey("OfferId");

                    b.Navigation("Category");

                    b.Navigation("menu");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Menu_Item_Size", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Item", "Item")
                        .WithMany("menu_Item_Sizes")
                        .HasForeignKey("Item_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Item_Size", "Item_Size")
                        .WithMany("menu_Item_Sizes")
                        .HasForeignKey("Item_Size_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Item_Size");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Offer", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Menu", "Menu")
                        .WithMany("offers")
                        .HasForeignKey("Menu_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Order", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Customer", "Customer")
                        .WithMany("orders")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Region", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.District", "District")
                        .WithMany("regions")
                        .HasForeignKey("District_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Reservation", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Customer", "Customer")
                        .WithMany("reservations")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Resturant", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Menu", "Menu")
                        .WithOne("Resturant")
                        .HasForeignKey("Akalaat.DAL.Models.Resturant", "Menu_ID");

                    b.HasOne("Akalaat.DAL.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("Vendor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Review", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Customer", "Customer")
                        .WithMany("reviews")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Resturant", "Resturant")
                        .WithMany("reviews")
                        .HasForeignKey("Resturant_ID");

                    b.Navigation("Customer");

                    b.Navigation("Resturant");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Item", "Item")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("DishResturant", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Resturant", null)
                        .WithMany()
                        .HasForeignKey("resturantDishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoodResturant", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.Mood", null)
                        .WithMany()
                        .HasForeignKey("MoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Resturant", null)
                        .WithMany()
                        .HasForeignKey("resturant_MoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Admin", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Akalaat.DAL.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Customer", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Akalaat.DAL.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCart_ID");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Vendor", b =>
                {
                    b.HasOne("Akalaat.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Akalaat.DAL.Models.Vendor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Akalaat.DAL.Models.Resturant", "Resturant")
                        .WithMany()
                        .HasForeignKey("Resturant_ID");

                    b.Navigation("Resturant");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.District", b =>
                {
                    b.Navigation("regions");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Item", b =>
                {
                    b.Navigation("ShoppingCartItems");

                    b.Navigation("extras");

                    b.Navigation("menu_Item_Sizes");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Item_Size", b =>
                {
                    b.Navigation("menu_Item_Sizes");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Menu", b =>
                {
                    b.Navigation("Resturant")
                        .IsRequired();

                    b.Navigation("categories");

                    b.Navigation("items");

                    b.Navigation("offers");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Offer", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Region", b =>
                {
                    b.Navigation("AddressBooks");

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Reservation", b =>
                {
                    b.Navigation("BranchReservations");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Resturant", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Akalaat.DAL.Models.Customer", b =>
                {
                    b.Navigation("Address_Book");

                    b.Navigation("orders");

                    b.Navigation("reservations");

                    b.Navigation("reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
